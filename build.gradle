buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/maven' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath group: 'org.parchmentmc.librarian.forgegradle', name: 'org.parchmentmc.librarian.forgegradle.gradle.plugin', version: '1.+'
    }
}

plugins {
    id 'idea'
    id 'eclipse'
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev.legacyforge' version '2.0.78'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

legacyForge {
    version = project.minecraft_version + '-' + project.forge_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    accessTransformers.from(file('src/main/resources/META-INF/accesstransformer.cfg'))

    runs {
        client {
            client()
            programArguments.addAll('--username', 'player1')
            setGameDirectory(file('run/client1'))
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }

        client2 {
            client()
            programArguments.addAll('--username', 'player2')
            setGameDirectory(file('run/client2'))
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }


        gameTestServer {
            type = "gameTestServer"
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}
obfuscation {
    createRemappingConfiguration(configurations.localRuntime)
}

dependencies {
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.4.1"))
}


mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}


jar {
    manifest.attributes([
            "MixinConfigs": "${mod_id}.mixins.json"
    ])
}

var replaceProperties = [
        minecraft_version        : minecraft_version,
        minecraft_version_range  : minecraft_version_range,
        forge_version            : forge_version,
        forge_version_range      : forge_version_range,
        loader_version_range     : loader_version_range,
        mod_id                   : mod_id,
        mod_name                 : mod_name,
        mod_license              : mod_license,
        mod_version              : mod_version,
        mod_authors              : mod_authors,
        mod_description          : mod_description,
]

processResources{
    filesMatching('**/*.toml') {
        expand replaceProperties
    }
}

//sourceSets.main.resources.srcDir generateModMetadata
//legacyForge.ideSyncTask generateModMetadata

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
